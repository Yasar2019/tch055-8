DROP TABLE Forfait CASCADE CONSTRAINTS;
DROP TABLE Adresse CASCADE CONSTRAINTS;
DROP TABLE Clientelle CASCADE CONSTRAINTS;
DROP TABLE Magasin CASCADE CONSTRAINTS;
DROP TABLE Realisateur CASCADE CONSTRAINTS;
DROP TABLE ActeurPrincipal CASCADE CONSTRAINTS;
DROP TABLE Genre CASCADE CONSTRAINTS;
DROP TABLE Facture CASCADE CONSTRAINTS;
DROP TABLE Film CASCADE CONSTRAINTS;
DROP TABLE DVD CASCADE CONSTRAINTS;
DROP TABLE Emprunt CASCADE CONSTRAINTS;
DROP TABLE Film_ActeurPrincipal CASCADE CONSTRAINTS;

CREATE TABLE Forfait
(forfaitId NUMBER(10) PRIMARY KEY,
nombreDeDVD NUMBER(10) NOT NULL,
caution NUMBER(10) NOT NULL
);

CREATE TABLE Clientelle
(clientId NUMBER(10) PRIMARY KEY,
nomClient VARCHAR2(30) NOT NULL,
prenomClient VARCHAR2(30) NOT NULL,
dateDeNaissance DATE NOT NULL,
noTelephone VARCHAR2(30) NOT NULL,
clientActif VARCHAR2(30) CHECK(UPPER(clientActif) IN ('ACTIF', 'INACTIF')),
forfaitId NUMBER(10),
FOREIGN KEY (forfaitId) REFERENCES Forfait (forfaitid)
);


CREATE TABLE Adresse
(codePostal VARCHAR2(30) PRIMARY KEY,
 numRue VARCHAR2(30) NOT NULL,
 nomRue VARCHAR2(30) NOT NULL,
 ville VARCHAR2(30) NOT NULL,
 clientId NUMBER(10),
 FOREIGN KEY (clientId) REFERENCES Clientelle (clientId)
 );


CREATE TABLE Magasin
(magasinId NUMBER(10) PRIMARY KEY,
nomMagasin VARCHAR2(30) NOT NULL
);

CREATE TABLE Realisateur
(realisateurId NUMBER(10) PRIMARY KEY,
nomRealisateur VARCHAR2(30) NOT NULL,
prenomRealisateur VARCHAR2(30) NOT NULL
);

CREATE TABLE ActeurPrincipal
(acteurPrincipalId NUMBER(10) PRIMARY KEY,
nomActeur VARCHAR2(30) NOT NULL,
prenomActeur VARCHAR2(30) NOT NULL
);

CREATE TABLE Genre
(genreId NUMBER(10) PRIMARY KEY,
nomGenre VARCHAR2(30) NOT NULL,
typeDePublic VARCHAR2(30) NOT NULL
);

CREATE TABLE Facture
(factureId NUMBER(10) PRIMARY KEY,
dateFacture DATE NOT NULL,
clientId NUMBER(10),
FOREIGN KEY (clientId) REFERENCES Clientelle (clientId)
);

CREATE TABLE Film
(filmId NUMBER(10) PRIMARY KEY,
titreFilm VARCHAR2(30) NOT NULL,
dureeFilm FLOAT NOT NULL,
realisateurId NUMBER(10),
genreId NUMBER(10),
FOREIGN KEY (realisateurId) REFERENCES Realisateur (realisateurId),
FOREIGN KEY (genreId) REFERENCES Genre (genreId)
);

CREATE TABLE DVD
(dvdId NUMBER(10) PRIMARY KEY,
dateMiseEnService DATE NOT NULL,
etat VARCHAR2(30) NOT NULL,
filmId NUMBER(10),
magasinId NUMBER(10),
FOREIGN KEY (filmId) REFERENCES Film (filmId),
FOREIGN KEY (magasinId) REFERENCES Magasin (magasinId)
);

CREATE TABLE Emprunt
(numEmprunt NUMBER(10) PRIMARY KEY,
 clientId NUMBER(10),
 dvdId NUMBER(10),
 dateEmprunt DATE NOT NULL,
 dateRetour DATE NULL,
 note NUMBER(3) NULL 
      CHECK(note>=0 AND note<=100),
 FOREIGN KEY (clientId) REFERENCES Clientelle (clientId), 
 FOREIGN KEY (dvdId) REFERENCES DVD (dvdId),
 CHECK (dateRetour > dateEmprunt)
);


CREATE TABLE Film_ActeurPrincipal
(filmid NUMBER(10),
 acteurPrincipalId NUMBER(10),
 PRIMARY KEY(filmid,acteurprincipalid),
 FOREIGN KEY (filmid) REFERENCES FILM (filmid),
 FOREIGN KEY (acteurprincipalid) REFERENCES ActeurPrincipal(acteurprincipalid)
 );
 
 /*TRIGGER PERMETTANT DE  S'ASSURER QUE LA DATE D'EMPRUNT RENTRÉE EST VALIDE*/
CREATE OR REPLACE TRIGGER DATE_EMPRUNT_VALIDE
BEFORE INSERT ON EMPRUNT
FOR EACH ROW
DECLARE DATEMISEENSERVICE_TMP DATE;
BEGIN
 SELECT DATEMISEENSERVICE INTO DATEMISEENSERVICE_TMP FROM DVD WHERE DVD.DVDID = :NEW.DVDID;
 
 IF :NEW.dateEmprunt < DATEMISEENSERVICE_TMP
  THEN RAISE_APPLICATION_ERROR(-20000,'LA DATE D"EMPRUNT RENTREE EST INVALIDE!');
 END IF;
END;
/

/*TRIGGER PERMETTANT DE S'ASSURER QUE LE CLIENT N'A PAS DEPASSER LE NOMBRE
D"EMPRUNTS PERMIS*/
CREATE OR REPLACE TRIGGER NOMBRE_EMPRUNT_MAXIMUM
BEFORE INSERT ON EMPRUNT
FOR EACH ROW
DECLARE NOMBREDEDVDMAXIMUMAUTORISE NUMBER;
        NOMBREEMPRUNTCOURANT NUMBER;
        CAUTIONACTIVE NUMBER;
BEGIN
 SELECT FORFAITID INTO CAUTIONACTIVE FROM CLIENTELLE WHERE CLIENTELLE.ClientId = :NEW.clientId;
 SELECT NOMBREDEDVD INTO NOMBREDEDVDMAXIMUMAUTORISE FROM FORFAIT WHERE FORFAIT.forfaitId = CAUTIONACTIVE; 
 SELECT COUNT(CLIENTID) INTO NOMBREEMPRUNTCOURANT FROM EMPRUNT WHERE EMPRUNT.ClientId = :NEW.clientId AND dateRetour IS NULL;
 
 IF NOMBREEMPRUNTCOURANT >=NOMBREDEDVDMAXIMUMAUTORISE
 THEN RAISE_APPLICATION_ERROR(-20001,'LE CLIENT A DEPASSER LA LIMITE DE LOCATIONS AUTORISÉES!');
 END IF;
END;
/

/*TRIGGER PERMETTANT DE VERIFIER SI LE CLIENT EST BIEN ACTIF AVANT QU'IL PUISSE LOUER LE DVD*/
CREATE OR REPLACE TRIGGER CLIENT_ACTIF
BEFORE INSERT ON EMPRUNT
FOR EACH ROW
DECLARE ACTIVITECLIENT VARCHAR2(50);
BEGIN 
 SELECT clientActif INTO ACTIVITECLIENT FROM CLIENTELLE WHERE CLIENTELLE.ClientId = :NEW.clientId;
 IF ACTIVITECLIENT = 'INACTIF'
 THEN RAISE_APPLICATION_ERROR(-20002,'LE CLIENT EST INACTIF!');
 END IF;
END;
/



